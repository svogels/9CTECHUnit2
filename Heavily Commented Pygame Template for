# This line tells Python to get all the special tools from the Pygame library.
# We need these tools to make our game.
import pygame

# This line turns on all the Pygame tools that we just imported.
# Think of it like turning on the power for our game-making machine.
pygame.init()

# --- 1. SETTINGS AND VARIABLES ---
# We will put all our game's settings here. It makes them easy to find and change.

# This sets how wide our game window will be, in pixels.
# A pixel is one tiny dot on your screen.
WINDOW_WIDTH = 800

# This sets how tall our game window will be.
WINDOW_HEIGHT = 600

# This creates the actual game window using the width and height we just set.
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

# This sets the name that appears at the very top of the game window.
pygame.display.set_caption("Stephen's Awesome Game")

# This is a tool that helps us control how fast our game runs.
# We will use it at the end of our game loop.
clock = pygame.time.Clock()

# --- 2. COLORS ---
# Computers make colors by mixing Red, Green, and Blue light.
# The numbers go from 0 (none of that color) to 255 (the maximum amount).
# (Red, Green, Blue)

# You can change which color is used to draw the player later!
BLACK = (0, 0, 0)         # No red, no green, no blue makes black.
WHITE = (255, 255, 255)   # Full red, green, and blue makes white.
GREEN = (0, 255, 0)       # Just green light.
RED = (255, 0, 0)         # Just red light.
BLUE = (0, 0, 255)        # Just blue light.

# --- 3. PLAYER SETUP ---
# These variables will control everything about our player.

# This is the color of our player's rectangle.
# *** YOU CAN CHANGE THIS! Try changing GREEN to RED or BLUE. ***
PLAYER_COLOR = GREEN

# This is how fast our player moves across the screen.
# A bigger number means the player moves faster.
# *** YOU CAN CHANGE THIS! Try making the speed 1 (very slow) or 10 (very fast). ***
PLAYER_SPEED = 5

# This is how wide our player's rectangle is.
player_width = 50

# This is how tall our player's rectangle is.
player_height = 50

# This is the player's starting position on the screen.
# We will start it in the middle.
# The 'x' position is how far across the screen (left and right).
player_x = (WINDOW_WIDTH / 2) - (player_width / 2)
# The 'y' position is how far down the screen (up and down).
player_y = (WINDOW_HEIGHT / 2) - (player_height / 2)


# --- THE MAIN GAME LOOP ---
# This is the heart of our game. It's a loop that runs over and over again.
# Each time it loops, it checks for input, moves things, and draws everything.
# We set 'running' to True to start the loop.
running = True
while running:

    # --- 4. CHECK FOR EVENTS (like closing the window) ---
    # The game looks to see if the player has done anything, like clicking a button.
    for event in pygame.event.get():
        # If the player clicks the 'X' button on the window...
        if event.type == pygame.QUIT:
            # ...we set 'running' to False. This will make our 'while' loop stop.
            running = False

    # --- 5. CHECK FOR KEYBOARD PRESSES (for movement) ---
    # This checks which keys are being HELD DOWN right now.
    # This is good for smooth movement.
    keys = pygame.key.get_pressed()

    # If the LEFT arrow key is being held down...
    if keys[pygame.K_LEFT]:
        # ...we SUBTRACT from the player's 'x' position to move it left.
        player_x = player_x - PLAYER_SPEED

    # If the RIGHT arrow key is being held down...
    if keys[pygame.K_RIGHT]:
        # ...we ADD to the player's 'x' position to move it right.
        player_x = player_x + PLAYER_SPEED

    # If the UP arrow key is being held down...
    if keys[pygame.K_UP]:
        # ...we SUBTRACT from the player's 'y' position to move it up.
        # This seems backwards, but on a computer screen, Y gets smaller as you go up.
        player_y = player_y - PLAYER_SPEED

    # If the DOWN arrow key is being held down...
    if keys[pygame.K_DOWN]:
        # ...we ADD to the player's 'y' position to move it down.
        player_y = player_y + PLAYER_SPEED

    # --- 6. BOUNDARY CHECKING (Keep the player on the screen!) ---
    # These are our "invisible walls".

    # If the player's left edge (player_x) goes past the left wall (position 0)...
    if player_x < 0:
        # ...we lock its position at 0 so it can't go any further.
        player_x = 0

    # If the player's RIGHT edge (player_x + player_width) goes past the right wall...
    if player_x + player_width > WINDOW_WIDTH:
        # ...we lock its position so its right edge is at the window's width.
        player_x = WINDOW_WIDTH - player_width

    # If the player's top edge (player_y) goes past the top wall (position 0)...
    if player_y < 0:
        # ...we lock its position at 0.
        player_y = 0

    # If the player's BOTTOM edge (player_y + player_height) goes past the bottom wall...
    if player_y + player_height > WINDOW_HEIGHT:
        # ...we lock its position so its bottom edge is at the window's height.
        player_y = WINDOW_HEIGHT - player_height


    # --- 7. DRAWING (Put everything on the screen) ---
    # First, we wipe the screen clean by filling it with a background color.
    # If we don't do this, our player will leave a long trail behind it.
    screen.fill(BLACK)

    # Now, we draw our player's rectangle on the screen.
    # We tell it WHERE to draw (screen).
    # We tell it WHAT COLOR to use (the PLAYER_COLOR we set earlier).
    # We tell it the EXACT spot and size using a rectangle: (x, y, width, height).
    pygame.draw.rect(screen, PLAYER_COLOR, (player_x, player_y, player_width, player_height))

    # --- 8. UPDATE THE DISPLAY ---
    # This is a very important line!
    # After we have drawn everything, this line takes all our drawings and
    # actually puts them onto the monitor for us to see.
    pygame.display.flip()

    # This tells our game to wait a tiny bit.
    # It makes sure our game runs at the same speed on all computers.
    # We are telling it to run at 60 frames (or loops) per second.
    clock.tick(60)


# --- END OF THE GAME ---
# When the 'while' loop is finished (because 'running' became False),
# this line will run. It safely closes down Pygame.
pygame.quit()
